// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220125005258_DbInit")]
    partial class DbInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("BlackList")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("DateOfDismissal")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfEmployment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DayOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("Entities.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOfPriceSetting")
                        .HasColumnType("timestamp")
                        .HasColumnName("date_of_price_setting");

                    b.Property<DateTime?>("DateOfWriteOff")
                        .HasColumnType("timestamp")
                        .HasColumnName("date_of_writeoff");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<decimal>("PriceOfPenalty")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price_of_penalty");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.Property<string>("TypeItem")
                        .HasColumnType("text");

                    b.Property<bool>("WorkingСapacity")
                        .HasColumnType("boolean")
                        .HasColumnName("working_capacity");

                    b.HasKey("Id");

                    b.ToTable("inventory_items");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("payment_status");

                    b.Property<int>("PlayPlaceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("timestamp")
                        .HasColumnName("time_end");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("timestamp")
                        .HasColumnName("time_start");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_price");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PlayPlaceId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Entities.Penalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("clientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("employeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("paymentStatus")
                        .HasColumnType("boolean");

                    b.Property<double>("totalPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("clientId");

                    b.HasIndex("employeeId");

                    b.ToTable("penalties");
                });

            modelBuilder.Entity("Entities.PlayPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOfPriceSetting")
                        .HasColumnType("timestamp")
                        .HasColumnName("date_of_price_setting");

                    b.Property<DateTime?>("DateOfWriteOff")
                        .HasColumnType("timestamp")
                        .HasColumnName("date_of_writeoff");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.Property<string>("TypeItem")
                        .HasColumnType("text");

                    b.Property<bool>("WorkingСapacity")
                        .HasColumnType("boolean")
                        .HasColumnName("working_capacity");

                    b.HasKey("Id");

                    b.ToTable("play_places");
                });

            modelBuilder.Entity("InventoryItemOrder", b =>
                {
                    b.Property<int>("InventoryListId")
                        .HasColumnType("integer");

                    b.Property<int>("OrdersId")
                        .HasColumnType("integer");

                    b.HasKey("InventoryListId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("InventoryItemOrder");
                });

            modelBuilder.Entity("InventoryItemPenalty", b =>
                {
                    b.Property<int>("PenaltyesId")
                        .HasColumnType("integer");

                    b.Property<int>("inventoryListId")
                        .HasColumnType("integer");

                    b.HasKey("PenaltyesId", "inventoryListId");

                    b.HasIndex("inventoryListId");

                    b.ToTable("InventoryItemPenalty");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.HasOne("Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.PlayPlace", "PlayPlace")
                        .WithMany("Orders")
                        .HasForeignKey("PlayPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("PlayPlace");
                });

            modelBuilder.Entity("Entities.Penalty", b =>
                {
                    b.HasOne("Entities.Client", "client")
                        .WithMany()
                        .HasForeignKey("clientId");

                    b.HasOne("Entities.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId");

                    b.Navigation("client");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("InventoryItemOrder", b =>
                {
                    b.HasOne("Entities.InventoryItem", null)
                        .WithMany()
                        .HasForeignKey("InventoryListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryItemPenalty", b =>
                {
                    b.HasOne("Entities.Penalty", null)
                        .WithMany()
                        .HasForeignKey("PenaltyesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.InventoryItem", null)
                        .WithMany()
                        .HasForeignKey("inventoryListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.PlayPlace", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
